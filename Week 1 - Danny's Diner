/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?

SELECT customer_id
	,sum(price)
FROM sales
INNER JOIN menu
ON sales.product_id = menu.product_id
GROUP BY customer_id
;
-- 2. How many days has each customer visited the restaurant?
SELECT customer_id
	,COUNT(DISTINCT order_date) as days_visited
FROM sales
GROUP BY customer_id
;
-- 3. What was the first item from the menu purchased by each customer?

WITH ranked_orders AS (

SELECT customer_id
	,order_date
    ,product_name
    ,DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY order_date ASC) as _rank
FROM sales
INNER JOIN menu
ON sales.product_id = menu.product_id
)
SELECT customer_id
	,product_name as first_order
FROM ranked_orders
WHERE _rank = 1
;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT product_name
    ,COUNT(S.product_id) as order_count
FROM sales AS S
INNER JOIN menu AS M
ON S.product_id = M.product_id
GROUP BY M.product_name
ORDER BY order_count DESC
LIMIT 1
;

-- 5. Which item was the most popular for each customer?
WITH order_count AS (
SELECT customer_id
	,product_id
    ,COUNT(product_id)
  	,RANK() OVER (PARTITION BY customer_id ORDER BY COUNT(order_date) DESC)
FROM sales
GROUP BY customer_id
	,product_id
)
SELECT customer_id
	,product_name as most_popular_product
    ,count as times_ordered
FROM order_count
INNER JOIN menu
ON order_count.product_id = menu.product_id
WHERE rank = 1
;

-- 6. Which item was purchased first by the customer after they became a member?

WITH post_membership as (
SELECT sales.customer_id
	,order_date
    ,product_id
FROM sales
LEFT JOIN members
ON sales.customer_id = members.customer_id
WHERE order_date >= join_date
  )
  ,ranked_dates as (
 SELECT customer_id
 	,order_date
    ,product_id
    ,RANK() OVER (PARTITION BY customer_id ORDER BY order_date ASC) as _rank   
FROM post_membership)

SELECT customer_id
	,order_date
    ,product_name
FROM ranked_dates
INNER JOIN menu
ON ranked_dates.product_id = menu.product_id
WHERE _rank = 1

-- 7. Which item was purchased just before the customer became a member?
WITH pre_membership as (
SELECT sales.customer_id
	,order_date
    ,product_id
FROM sales
LEFT JOIN members
ON sales.customer_id = members.customer_id
WHERE order_date < join_date
  )
  ,ranked_dates as (
 SELECT customer_id
 	,order_date
    ,product_id
    ,RANK() OVER (PARTITION BY customer_id ORDER BY order_date DESC) as _rank   
FROM pre_membership)

SELECT customer_id
	,order_date
    ,product_name
FROM ranked_dates
INNER JOIN menu
ON ranked_dates.product_id = menu.product_id
WHERE _rank = 1
;


-- 8. What is the total items and amount spent for each member before they became a member?

WITH premem_sales AS (
SELECT sales.customer_id
	,order_date
    ,product_id
FROM sales
INNER JOIN members
ON sales.customer_id = members.customer_id
WHERE order_date<join_date
  )
SELECT customer_id
	,SUM(price)
FROM premem_sales AS ps
INNER JOIN menu AS m
ON ps.product_id = m.product_id
GROUP BY customer_id
;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH cte AS (
SELECT 
  s.customer_id,
  s.product_id,
  m.product_name,
  m.price,
  CASE
  WHEN m.product_name = 'sushi' THEN 2*(m.price*10)
  ELSE m.price*10 
  END AS points
FROM sales AS s
JOIN menu AS m ON s.product_id = m.product_id)

SELECT customer_id
	,SUM(points)
FROM cte
GROUP BY customer_id
;


-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SELECT s.customer_id
	,SUM(CASE
  WHEN men.product_name = 'sushi' 
  OR order_date - join_date <=7
  THEN 2*(men.price*10)
  ELSE men.price*10 
  END) AS points
FROM sales as s
INNER JOIN members as m
ON s.customer_id = m.customer_id
INNER JOIN menu as men
ON s.product_id = men.product_id
WHERE EXTRACT(MONTH FROM order_date) = 1
GROUP BY s.customer_id
;
